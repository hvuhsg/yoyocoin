import ecdsa
from base64 import b64encode


class Wallet:
    main_wallet = None

    @classmethod
    def get_main_wallet(cls):
        return cls.main_wallet

    @classmethod
    def set_main_wallet(cls, wallet):
        cls.main_wallet = wallet

    def __init__(self, secret_passcode: int = None):
        if secret_passcode is None:
            print("Warning: wallet is generated by random")
            self.private_key = ecdsa.SigningKey.generate()
        else:
            self.private_key = ecdsa.SigningKey.from_secret_exponent(secexp=secret_passcode, curve=ecdsa.SECP256k1)
        self.private_address = b64encode(self.private_key.to_string()).decode()
        self.public_key = self.private_key.get_verifying_key()
        self.public_address = b64encode(self.public_key.to_string()).decode()

    def public(self) -> str:
        return self.public_address

    def private(self) -> str:
        return self.private_address
